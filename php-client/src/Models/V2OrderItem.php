<?php
/**
 * V2OrderItem
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Mrstebo\EkmPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EKM Partner API
 *
 * Our new API allows partners to build significantly better integrations with the EKM platform.    To try out the below endpoints, or for full up to date representations of the request / response models, please see the [swagger page](https://api.ekm.net/swagger/index.html). (We display examples here, but the swagger page is guaranteed to show the complete model.)    To keep up to date with the latest updates, please see our [RSS feed](https://partners.ekm.net/ChangeLog/Feed) or the [partner dashboard](https://partners.ekm.net/).
 *
 * The version of the OpenAPI document: Latest
 * Contact: api-support@ekm.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Mrstebo\EkmPHP\Models;

use \ArrayAccess;
use \Mrstebo\EkmPHP\ObjectSerializer;

/**
 * V2OrderItem Class Doc Comment
 *
 * @category Class
 * @package  Mrstebo\EkmPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class V2OrderItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V2OrderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'orderNumber' => 'string',
        'quantity' => 'int',
        'orderId' => 'int',
        'productCode' => 'string',
        'itemDelivery' => 'double',
        'itemDiscount' => 'double',
        'itemId' => 'int',
        'itemName' => 'string',
        'itemOptions' => 'string',
        'itemOrderNote' => 'string',
        'itemPrice' => 'double',
        'itemTax' => 'double',
        'itemTaxId' => 'int',
        'itemTaxRate' => 'double',
        'productId' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'orderNumber' => null,
        'quantity' => 'int64',
        'orderId' => 'int64',
        'productCode' => null,
        'itemDelivery' => 'double',
        'itemDiscount' => 'double',
        'itemId' => 'int32',
        'itemName' => null,
        'itemOptions' => null,
        'itemOrderNote' => null,
        'itemPrice' => 'double',
        'itemTax' => 'double',
        'itemTaxId' => 'int32',
        'itemTaxRate' => 'double',
        'productId' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'orderNumber' => 'order_number',
        'quantity' => 'quantity',
        'orderId' => 'order_id',
        'productCode' => 'product_code',
        'itemDelivery' => 'item_delivery',
        'itemDiscount' => 'item_discount',
        'itemId' => 'item_id',
        'itemName' => 'item_name',
        'itemOptions' => 'item_options',
        'itemOrderNote' => 'item_order_note',
        'itemPrice' => 'item_price',
        'itemTax' => 'item_tax',
        'itemTaxId' => 'item_tax_id',
        'itemTaxRate' => 'item_tax_rate',
        'productId' => 'product_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'orderNumber' => 'setOrderNumber',
        'quantity' => 'setQuantity',
        'orderId' => 'setOrderId',
        'productCode' => 'setProductCode',
        'itemDelivery' => 'setItemDelivery',
        'itemDiscount' => 'setItemDiscount',
        'itemId' => 'setItemId',
        'itemName' => 'setItemName',
        'itemOptions' => 'setItemOptions',
        'itemOrderNote' => 'setItemOrderNote',
        'itemPrice' => 'setItemPrice',
        'itemTax' => 'setItemTax',
        'itemTaxId' => 'setItemTaxId',
        'itemTaxRate' => 'setItemTaxRate',
        'productId' => 'setProductId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'orderNumber' => 'getOrderNumber',
        'quantity' => 'getQuantity',
        'orderId' => 'getOrderId',
        'productCode' => 'getProductCode',
        'itemDelivery' => 'getItemDelivery',
        'itemDiscount' => 'getItemDiscount',
        'itemId' => 'getItemId',
        'itemName' => 'getItemName',
        'itemOptions' => 'getItemOptions',
        'itemOrderNote' => 'getItemOrderNote',
        'itemPrice' => 'getItemPrice',
        'itemTax' => 'getItemTax',
        'itemTaxId' => 'getItemTaxId',
        'itemTaxRate' => 'getItemTaxRate',
        'productId' => 'getProductId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['orderNumber'] = $data['orderNumber'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
        $this->container['orderId'] = $data['orderId'] ?? null;
        $this->container['productCode'] = $data['productCode'] ?? null;
        $this->container['itemDelivery'] = $data['itemDelivery'] ?? null;
        $this->container['itemDiscount'] = $data['itemDiscount'] ?? null;
        $this->container['itemId'] = $data['itemId'] ?? null;
        $this->container['itemName'] = $data['itemName'] ?? null;
        $this->container['itemOptions'] = $data['itemOptions'] ?? null;
        $this->container['itemOrderNote'] = $data['itemOrderNote'] ?? null;
        $this->container['itemPrice'] = $data['itemPrice'] ?? null;
        $this->container['itemTax'] = $data['itemTax'] ?? null;
        $this->container['itemTaxId'] = $data['itemTaxId'] ?? null;
        $this->container['itemTaxRate'] = $data['itemTaxRate'] ?? null;
        $this->container['productId'] = $data['productId'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (($this->container['id'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['id'] < 1)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 1.";
        }

        if ($this->container['orderNumber'] === null) {
            $invalidProperties[] = "'orderNumber' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['orderId'] === null) {
            $invalidProperties[] = "'orderId' can't be null";
        }
        if ($this->container['productCode'] === null) {
            $invalidProperties[] = "'productCode' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (($id > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $id when calling V2OrderItem., must be smaller than or equal to 2147483647.');
        }
        if (($id < 1)) {
            throw new \InvalidArgumentException('invalid value for $id when calling V2OrderItem., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets orderNumber
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['orderNumber'];
    }

    /**
     * Sets orderNumber
     *
     * @param string $orderNumber orderNumber
     *
     * @return self
     */
    public function setOrderNumber($orderNumber)
    {
        $this->container['orderNumber'] = $orderNumber;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param int $orderId orderId
     *
     * @return self
     */
    public function setOrderId($orderId)
    {
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets productCode
     *
     * @return string
     */
    public function getProductCode()
    {
        return $this->container['productCode'];
    }

    /**
     * Sets productCode
     *
     * @param string $productCode productCode
     *
     * @return self
     */
    public function setProductCode($productCode)
    {
        $this->container['productCode'] = $productCode;

        return $this;
    }

    /**
     * Gets itemDelivery
     *
     * @return double|null
     */
    public function getItemDelivery()
    {
        return $this->container['itemDelivery'];
    }

    /**
     * Sets itemDelivery
     *
     * @param double|null $itemDelivery itemDelivery
     *
     * @return self
     */
    public function setItemDelivery($itemDelivery)
    {
        $this->container['itemDelivery'] = $itemDelivery;

        return $this;
    }

    /**
     * Gets itemDiscount
     *
     * @return double|null
     */
    public function getItemDiscount()
    {
        return $this->container['itemDiscount'];
    }

    /**
     * Sets itemDiscount
     *
     * @param double|null $itemDiscount itemDiscount
     *
     * @return self
     */
    public function setItemDiscount($itemDiscount)
    {
        $this->container['itemDiscount'] = $itemDiscount;

        return $this;
    }

    /**
     * Gets itemId
     *
     * @return int|null
     */
    public function getItemId()
    {
        return $this->container['itemId'];
    }

    /**
     * Sets itemId
     *
     * @param int|null $itemId itemId
     *
     * @return self
     */
    public function setItemId($itemId)
    {
        $this->container['itemId'] = $itemId;

        return $this;
    }

    /**
     * Gets itemName
     *
     * @return string|null
     */
    public function getItemName()
    {
        return $this->container['itemName'];
    }

    /**
     * Sets itemName
     *
     * @param string|null $itemName itemName
     *
     * @return self
     */
    public function setItemName($itemName)
    {
        $this->container['itemName'] = $itemName;

        return $this;
    }

    /**
     * Gets itemOptions
     *
     * @return string|null
     */
    public function getItemOptions()
    {
        return $this->container['itemOptions'];
    }

    /**
     * Sets itemOptions
     *
     * @param string|null $itemOptions itemOptions
     *
     * @return self
     */
    public function setItemOptions($itemOptions)
    {
        $this->container['itemOptions'] = $itemOptions;

        return $this;
    }

    /**
     * Gets itemOrderNote
     *
     * @return string|null
     */
    public function getItemOrderNote()
    {
        return $this->container['itemOrderNote'];
    }

    /**
     * Sets itemOrderNote
     *
     * @param string|null $itemOrderNote itemOrderNote
     *
     * @return self
     */
    public function setItemOrderNote($itemOrderNote)
    {
        $this->container['itemOrderNote'] = $itemOrderNote;

        return $this;
    }

    /**
     * Gets itemPrice
     *
     * @return double|null
     */
    public function getItemPrice()
    {
        return $this->container['itemPrice'];
    }

    /**
     * Sets itemPrice
     *
     * @param double|null $itemPrice itemPrice
     *
     * @return self
     */
    public function setItemPrice($itemPrice)
    {
        $this->container['itemPrice'] = $itemPrice;

        return $this;
    }

    /**
     * Gets itemTax
     *
     * @return double|null
     */
    public function getItemTax()
    {
        return $this->container['itemTax'];
    }

    /**
     * Sets itemTax
     *
     * @param double|null $itemTax itemTax
     *
     * @return self
     */
    public function setItemTax($itemTax)
    {
        $this->container['itemTax'] = $itemTax;

        return $this;
    }

    /**
     * Gets itemTaxId
     *
     * @return int|null
     */
    public function getItemTaxId()
    {
        return $this->container['itemTaxId'];
    }

    /**
     * Sets itemTaxId
     *
     * @param int|null $itemTaxId itemTaxId
     *
     * @return self
     */
    public function setItemTaxId($itemTaxId)
    {
        $this->container['itemTaxId'] = $itemTaxId;

        return $this;
    }

    /**
     * Gets itemTaxRate
     *
     * @return double|null
     */
    public function getItemTaxRate()
    {
        return $this->container['itemTaxRate'];
    }

    /**
     * Sets itemTaxRate
     *
     * @param double|null $itemTaxRate itemTaxRate
     *
     * @return self
     */
    public function setItemTaxRate($itemTaxRate)
    {
        $this->container['itemTaxRate'] = $itemTaxRate;

        return $this;
    }

    /**
     * Gets productId
     *
     * @return int|null
     */
    public function getProductId()
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     *
     * @param int|null $productId productId
     *
     * @return self
     */
    public function setProductId($productId)
    {
        $this->container['productId'] = $productId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


