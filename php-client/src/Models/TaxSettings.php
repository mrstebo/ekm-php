<?php
/**
 * TaxSettings
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Mrstebo\EkmPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EKM Partner API
 *
 * Our new API allows partners to build significantly better integrations with the EKM platform.    To try out the below endpoints, or for full up to date representations of the request / response models, please see the [swagger page](https://api.ekm.net/swagger/index.html). (We display examples here, but the swagger page is guaranteed to show the complete model.)    To keep up to date with the latest updates, please see our [RSS feed](https://partners.ekm.net/ChangeLog/Feed) or the [partner dashboard](https://partners.ekm.net/).
 *
 * The version of the OpenAPI document: Latest
 * Contact: api-support@ekm.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Mrstebo\EkmPHP\Models;

use \ArrayAccess;
use \Mrstebo\EkmPHP\ObjectSerializer;

/**
 * TaxSettings Class Doc Comment
 *
 * @category Class
 * @package  Mrstebo\EkmPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TaxSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaxSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'chargeTax' => 'bool',
        'productsIncludeTax' => 'bool',
        'productsPriceIncludeExcludeTax' => 'bool',
        'deliveryTax' => '\Mrstebo\EkmPHP\Models\DeliveryTax',
        'deliveryShowTax' => 'bool',
        'taxRates' => '\Mrstebo\EkmPHP\Models\TaxRateModel[]',
        'countryCodes' => '\Mrstebo\EkmPHP\Models\CountryCodeModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'chargeTax' => null,
        'productsIncludeTax' => null,
        'productsPriceIncludeExcludeTax' => null,
        'deliveryTax' => null,
        'deliveryShowTax' => null,
        'taxRates' => null,
        'countryCodes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'chargeTax' => 'charge_tax',
        'productsIncludeTax' => 'products_include_tax',
        'productsPriceIncludeExcludeTax' => 'products_price_include_exclude_tax',
        'deliveryTax' => 'delivery_tax',
        'deliveryShowTax' => 'delivery_show_tax',
        'taxRates' => 'tax_rates',
        'countryCodes' => 'country_codes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'chargeTax' => 'setChargeTax',
        'productsIncludeTax' => 'setProductsIncludeTax',
        'productsPriceIncludeExcludeTax' => 'setProductsPriceIncludeExcludeTax',
        'deliveryTax' => 'setDeliveryTax',
        'deliveryShowTax' => 'setDeliveryShowTax',
        'taxRates' => 'setTaxRates',
        'countryCodes' => 'setCountryCodes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'chargeTax' => 'getChargeTax',
        'productsIncludeTax' => 'getProductsIncludeTax',
        'productsPriceIncludeExcludeTax' => 'getProductsPriceIncludeExcludeTax',
        'deliveryTax' => 'getDeliveryTax',
        'deliveryShowTax' => 'getDeliveryShowTax',
        'taxRates' => 'getTaxRates',
        'countryCodes' => 'getCountryCodes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['chargeTax'] = $data['chargeTax'] ?? null;
        $this->container['productsIncludeTax'] = $data['productsIncludeTax'] ?? null;
        $this->container['productsPriceIncludeExcludeTax'] = $data['productsPriceIncludeExcludeTax'] ?? null;
        $this->container['deliveryTax'] = $data['deliveryTax'] ?? null;
        $this->container['deliveryShowTax'] = $data['deliveryShowTax'] ?? null;
        $this->container['taxRates'] = $data['taxRates'] ?? null;
        $this->container['countryCodes'] = $data['countryCodes'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets chargeTax
     *
     * @return bool|null
     */
    public function getChargeTax()
    {
        return $this->container['chargeTax'];
    }

    /**
     * Sets chargeTax
     *
     * @param bool|null $chargeTax chargeTax
     *
     * @return self
     */
    public function setChargeTax($chargeTax)
    {
        $this->container['chargeTax'] = $chargeTax;

        return $this;
    }

    /**
     * Gets productsIncludeTax
     *
     * @return bool|null
     */
    public function getProductsIncludeTax()
    {
        return $this->container['productsIncludeTax'];
    }

    /**
     * Sets productsIncludeTax
     *
     * @param bool|null $productsIncludeTax productsIncludeTax
     *
     * @return self
     */
    public function setProductsIncludeTax($productsIncludeTax)
    {
        $this->container['productsIncludeTax'] = $productsIncludeTax;

        return $this;
    }

    /**
     * Gets productsPriceIncludeExcludeTax
     *
     * @return bool|null
     */
    public function getProductsPriceIncludeExcludeTax()
    {
        return $this->container['productsPriceIncludeExcludeTax'];
    }

    /**
     * Sets productsPriceIncludeExcludeTax
     *
     * @param bool|null $productsPriceIncludeExcludeTax productsPriceIncludeExcludeTax
     *
     * @return self
     */
    public function setProductsPriceIncludeExcludeTax($productsPriceIncludeExcludeTax)
    {
        $this->container['productsPriceIncludeExcludeTax'] = $productsPriceIncludeExcludeTax;

        return $this;
    }

    /**
     * Gets deliveryTax
     *
     * @return \Mrstebo\EkmPHP\Models\DeliveryTax|null
     */
    public function getDeliveryTax()
    {
        return $this->container['deliveryTax'];
    }

    /**
     * Sets deliveryTax
     *
     * @param \Mrstebo\EkmPHP\Models\DeliveryTax|null $deliveryTax deliveryTax
     *
     * @return self
     */
    public function setDeliveryTax($deliveryTax)
    {
        $this->container['deliveryTax'] = $deliveryTax;

        return $this;
    }

    /**
     * Gets deliveryShowTax
     *
     * @return bool|null
     */
    public function getDeliveryShowTax()
    {
        return $this->container['deliveryShowTax'];
    }

    /**
     * Sets deliveryShowTax
     *
     * @param bool|null $deliveryShowTax deliveryShowTax
     *
     * @return self
     */
    public function setDeliveryShowTax($deliveryShowTax)
    {
        $this->container['deliveryShowTax'] = $deliveryShowTax;

        return $this;
    }

    /**
     * Gets taxRates
     *
     * @return \Mrstebo\EkmPHP\Models\TaxRateModel[]|null
     */
    public function getTaxRates()
    {
        return $this->container['taxRates'];
    }

    /**
     * Sets taxRates
     *
     * @param \Mrstebo\EkmPHP\Models\TaxRateModel[]|null $taxRates taxRates
     *
     * @return self
     */
    public function setTaxRates($taxRates)
    {
        $this->container['taxRates'] = $taxRates;

        return $this;
    }

    /**
     * Gets countryCodes
     *
     * @return \Mrstebo\EkmPHP\Models\CountryCodeModel[]|null
     */
    public function getCountryCodes()
    {
        return $this->container['countryCodes'];
    }

    /**
     * Sets countryCodes
     *
     * @param \Mrstebo\EkmPHP\Models\CountryCodeModel[]|null $countryCodes countryCodes
     *
     * @return self
     */
    public function setCountryCodes($countryCodes)
    {
        $this->container['countryCodes'] = $countryCodes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


