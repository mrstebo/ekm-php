<?php
/**
 * V1ProductVariant
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  EkmPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EKM Partner API
 *
 * Our new API allows partners to build significantly better integrations with the EKM platform.    To try out the below endpoints, or for full up to date representations of the request / response models, please see the [swagger page](https://api.ekm.net/swagger/index.html). (We display examples here, but the swagger page is guaranteed to show the complete model.)    To keep up to date with the latest updates, please see our [RSS feed](https://partners.ekm.net/ChangeLog/Feed) or the [partner dashboard](https://partners.ekm.net/).
 *
 * The version of the OpenAPI document: Latest
 * Contact: api-support@ekm.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EkmPHP\Models;

use \ArrayAccess;
use \EkmPHP\ObjectSerializer;

/**
 * V1ProductVariant Class Doc Comment
 *
 * @category Class
 * @package  EkmPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class V1ProductVariant implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V1ProductVariant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'parentProductId' => 'int',
        'productCode' => 'string',
        'rrp' => 'double',
        'isDefaultVariant' => 'bool',
        'numberInStock' => 'int',
        'price' => 'double',
        'productWeight' => 'double',
        'condition' => 'string',
        'gtin' => 'string',
        'mpn' => 'string',
        'live' => 'bool',
        'variantCombinations' => '\EkmPHP\Models\V1VariantCombination[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'parentProductId' => 'int64',
        'productCode' => null,
        'rrp' => 'double',
        'isDefaultVariant' => null,
        'numberInStock' => 'int64',
        'price' => 'double',
        'productWeight' => 'double',
        'condition' => null,
        'gtin' => null,
        'mpn' => null,
        'live' => null,
        'variantCombinations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'parentProductId' => 'parent_product_id',
        'productCode' => 'product_code',
        'rrp' => 'rrp',
        'isDefaultVariant' => 'is_default_variant',
        'numberInStock' => 'number_in_stock',
        'price' => 'price',
        'productWeight' => 'product_weight',
        'condition' => 'condition',
        'gtin' => 'gtin',
        'mpn' => 'mpn',
        'live' => 'live',
        'variantCombinations' => 'variant_combinations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'parentProductId' => 'setParentProductId',
        'productCode' => 'setProductCode',
        'rrp' => 'setRrp',
        'isDefaultVariant' => 'setIsDefaultVariant',
        'numberInStock' => 'setNumberInStock',
        'price' => 'setPrice',
        'productWeight' => 'setProductWeight',
        'condition' => 'setCondition',
        'gtin' => 'setGtin',
        'mpn' => 'setMpn',
        'live' => 'setLive',
        'variantCombinations' => 'setVariantCombinations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'parentProductId' => 'getParentProductId',
        'productCode' => 'getProductCode',
        'rrp' => 'getRrp',
        'isDefaultVariant' => 'getIsDefaultVariant',
        'numberInStock' => 'getNumberInStock',
        'price' => 'getPrice',
        'productWeight' => 'getProductWeight',
        'condition' => 'getCondition',
        'gtin' => 'getGtin',
        'mpn' => 'getMpn',
        'live' => 'getLive',
        'variantCombinations' => 'getVariantCombinations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['parentProductId'] = $data['parentProductId'] ?? null;
        $this->container['productCode'] = $data['productCode'] ?? null;
        $this->container['rrp'] = $data['rrp'] ?? null;
        $this->container['isDefaultVariant'] = $data['isDefaultVariant'] ?? null;
        $this->container['numberInStock'] = $data['numberInStock'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
        $this->container['productWeight'] = $data['productWeight'] ?? null;
        $this->container['condition'] = $data['condition'] ?? null;
        $this->container['gtin'] = $data['gtin'] ?? null;
        $this->container['mpn'] = $data['mpn'] ?? null;
        $this->container['live'] = $data['live'] ?? null;
        $this->container['variantCombinations'] = $data['variantCombinations'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['rrp']) && ($this->container['rrp'] < 0)) {
            $invalidProperties[] = "invalid value for 'rrp', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['price']) && ($this->container['price'] < 0)) {
            $invalidProperties[] = "invalid value for 'price', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['productWeight']) && ($this->container['productWeight'] < 0)) {
            $invalidProperties[] = "invalid value for 'productWeight', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parentProductId
     *
     * @return int|null
     */
    public function getParentProductId()
    {
        return $this->container['parentProductId'];
    }

    /**
     * Sets parentProductId
     *
     * @param int|null $parentProductId parentProductId
     *
     * @return self
     */
    public function setParentProductId($parentProductId)
    {
        $this->container['parentProductId'] = $parentProductId;

        return $this;
    }

    /**
     * Gets productCode
     *
     * @return string|null
     */
    public function getProductCode()
    {
        return $this->container['productCode'];
    }

    /**
     * Sets productCode
     *
     * @param string|null $productCode productCode
     *
     * @return self
     */
    public function setProductCode($productCode)
    {
        $this->container['productCode'] = $productCode;

        return $this;
    }

    /**
     * Gets rrp
     *
     * @return double|null
     */
    public function getRrp()
    {
        return $this->container['rrp'];
    }

    /**
     * Sets rrp
     *
     * @param double|null $rrp rrp
     *
     * @return self
     */
    public function setRrp($rrp)
    {

        if (!is_null($rrp) && ($rrp < 0)) {
            throw new \InvalidArgumentException('invalid value for $rrp when calling V1ProductVariant., must be bigger than or equal to 0.');
        }

        $this->container['rrp'] = $rrp;

        return $this;
    }

    /**
     * Gets isDefaultVariant
     *
     * @return bool|null
     */
    public function getIsDefaultVariant()
    {
        return $this->container['isDefaultVariant'];
    }

    /**
     * Sets isDefaultVariant
     *
     * @param bool|null $isDefaultVariant isDefaultVariant
     *
     * @return self
     */
    public function setIsDefaultVariant($isDefaultVariant)
    {
        $this->container['isDefaultVariant'] = $isDefaultVariant;

        return $this;
    }

    /**
     * Gets numberInStock
     *
     * @return int|null
     */
    public function getNumberInStock()
    {
        return $this->container['numberInStock'];
    }

    /**
     * Sets numberInStock
     *
     * @param int|null $numberInStock numberInStock
     *
     * @return self
     */
    public function setNumberInStock($numberInStock)
    {
        $this->container['numberInStock'] = $numberInStock;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {

        if (!is_null($price) && ($price < 0)) {
            throw new \InvalidArgumentException('invalid value for $price when calling V1ProductVariant., must be bigger than or equal to 0.');
        }

        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets productWeight
     *
     * @return double|null
     */
    public function getProductWeight()
    {
        return $this->container['productWeight'];
    }

    /**
     * Sets productWeight
     *
     * @param double|null $productWeight productWeight
     *
     * @return self
     */
    public function setProductWeight($productWeight)
    {

        if (!is_null($productWeight) && ($productWeight < 0)) {
            throw new \InvalidArgumentException('invalid value for $productWeight when calling V1ProductVariant., must be bigger than or equal to 0.');
        }

        $this->container['productWeight'] = $productWeight;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string|null
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string|null $condition condition
     *
     * @return self
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets gtin
     *
     * @return string|null
     */
    public function getGtin()
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     *
     * @param string|null $gtin gtin
     *
     * @return self
     */
    public function setGtin($gtin)
    {
        $this->container['gtin'] = $gtin;

        return $this;
    }

    /**
     * Gets mpn
     *
     * @return string|null
     */
    public function getMpn()
    {
        return $this->container['mpn'];
    }

    /**
     * Sets mpn
     *
     * @param string|null $mpn mpn
     *
     * @return self
     */
    public function setMpn($mpn)
    {
        $this->container['mpn'] = $mpn;

        return $this;
    }

    /**
     * Gets live
     *
     * @return bool|null
     */
    public function getLive()
    {
        return $this->container['live'];
    }

    /**
     * Sets live
     *
     * @param bool|null $live live
     *
     * @return self
     */
    public function setLive($live)
    {
        $this->container['live'] = $live;

        return $this;
    }

    /**
     * Gets variantCombinations
     *
     * @return \EkmPHP\Models\V1VariantCombination[]|null
     */
    public function getVariantCombinations()
    {
        return $this->container['variantCombinations'];
    }

    /**
     * Sets variantCombinations
     *
     * @param \EkmPHP\Models\V1VariantCombination[]|null $variantCombinations variantCombinations
     *
     * @return self
     */
    public function setVariantCombinations($variantCombinations)
    {
        $this->container['variantCombinations'] = $variantCombinations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


