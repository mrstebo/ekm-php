<?php
/**
 * V2Order
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  EkmPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * EKM Partner API
 *
 * Our new API allows partners to build significantly better integrations with the EKM platform.    To try out the below endpoints, or for full up to date representations of the request / response models, please see the [swagger page](https://api.ekm.net/swagger/index.html). (We display examples here, but the swagger page is guaranteed to show the complete model.)    To keep up to date with the latest updates, please see our [RSS feed](https://partners.ekm.net/ChangeLog/Feed) or the [partner dashboard](https://partners.ekm.net/).
 *
 * The version of the OpenAPI document: Latest
 * Contact: api-support@ekm.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EkmPHP\Models;

use \ArrayAccess;
use \EkmPHP\ObjectSerializer;

/**
 * V2Order Class Doc Comment
 *
 * @category Class
 * @package  EkmPHP
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class V2Order implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'V2Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'orderNumber' => 'string',
        'orderDate' => '\DateTime',
        'orderType' => 'string',
        'isConfirmed' => 'bool',
        'subTotal' => 'double',
        'totalDelivery' => 'double',
        'totalTax' => 'double',
        'totalCost' => 'double',
        'status' => 'string',
        'paymentStatus' => 'string',
        'deliveryMethod' => 'string',
        'transactionId' => 'string',
        'transactionStatus' => 'string',
        'useShippingAddress' => 'bool',
        'shippingAddress' => '\EkmPHP\Models\V1ShippingAddress',
        'internalNotes' => 'string',
        'customerFacingNotes' => 'string',
        'emailed' => 'bool',
        'discounts' => 'string',
        'discountsTotal' => 'double',
        'shippingCompany' => 'string',
        'ipAddress' => 'string',
        'guid' => 'string',
        'lastUpdated' => '\DateTime',
        'deliveryTaxRate' => 'double',
        'deliveryIncludesTax' => 'int',
        'customFieldsTotal' => 'double',
        'customFieldsTaxTotal' => 'double',
        'customerDetails' => '\EkmPHP\Models\V1OrderCustomerDetails',
        'customFields' => 'string',
        'deliveryTrackingNumber' => 'string',
        'deliveryTrackingCompany' => 'string',
        'deliveryTrackingUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'orderNumber' => null,
        'orderDate' => 'date-time',
        'orderType' => null,
        'isConfirmed' => null,
        'subTotal' => 'double',
        'totalDelivery' => 'double',
        'totalTax' => 'double',
        'totalCost' => 'double',
        'status' => null,
        'paymentStatus' => null,
        'deliveryMethod' => null,
        'transactionId' => null,
        'transactionStatus' => null,
        'useShippingAddress' => null,
        'shippingAddress' => null,
        'internalNotes' => null,
        'customerFacingNotes' => null,
        'emailed' => null,
        'discounts' => null,
        'discountsTotal' => 'double',
        'shippingCompany' => null,
        'ipAddress' => null,
        'guid' => 'uuid',
        'lastUpdated' => 'date-time',
        'deliveryTaxRate' => 'double',
        'deliveryIncludesTax' => 'int32',
        'customFieldsTotal' => 'double',
        'customFieldsTaxTotal' => 'double',
        'customerDetails' => null,
        'customFields' => null,
        'deliveryTrackingNumber' => null,
        'deliveryTrackingCompany' => null,
        'deliveryTrackingUrl' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'orderNumber' => 'order_number',
        'orderDate' => 'order_date',
        'orderType' => 'order_type',
        'isConfirmed' => 'is_confirmed',
        'subTotal' => 'sub_total',
        'totalDelivery' => 'total_delivery',
        'totalTax' => 'total_tax',
        'totalCost' => 'total_cost',
        'status' => 'status',
        'paymentStatus' => 'payment_status',
        'deliveryMethod' => 'delivery_method',
        'transactionId' => 'transaction_id',
        'transactionStatus' => 'transaction_status',
        'useShippingAddress' => 'use_shipping_address',
        'shippingAddress' => 'shipping_address',
        'internalNotes' => 'internal_notes',
        'customerFacingNotes' => 'customer_facing_notes',
        'emailed' => 'emailed',
        'discounts' => 'discounts',
        'discountsTotal' => 'discounts_total',
        'shippingCompany' => 'shipping_company',
        'ipAddress' => 'ip_address',
        'guid' => 'guid',
        'lastUpdated' => 'last_updated',
        'deliveryTaxRate' => 'delivery_tax_rate',
        'deliveryIncludesTax' => 'delivery_includes_tax',
        'customFieldsTotal' => 'custom_fields_total',
        'customFieldsTaxTotal' => 'custom_fields_tax_total',
        'customerDetails' => 'customer_details',
        'customFields' => 'custom_fields',
        'deliveryTrackingNumber' => 'delivery_tracking_number',
        'deliveryTrackingCompany' => 'delivery_tracking_company',
        'deliveryTrackingUrl' => 'delivery_tracking_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'orderNumber' => 'setOrderNumber',
        'orderDate' => 'setOrderDate',
        'orderType' => 'setOrderType',
        'isConfirmed' => 'setIsConfirmed',
        'subTotal' => 'setSubTotal',
        'totalDelivery' => 'setTotalDelivery',
        'totalTax' => 'setTotalTax',
        'totalCost' => 'setTotalCost',
        'status' => 'setStatus',
        'paymentStatus' => 'setPaymentStatus',
        'deliveryMethod' => 'setDeliveryMethod',
        'transactionId' => 'setTransactionId',
        'transactionStatus' => 'setTransactionStatus',
        'useShippingAddress' => 'setUseShippingAddress',
        'shippingAddress' => 'setShippingAddress',
        'internalNotes' => 'setInternalNotes',
        'customerFacingNotes' => 'setCustomerFacingNotes',
        'emailed' => 'setEmailed',
        'discounts' => 'setDiscounts',
        'discountsTotal' => 'setDiscountsTotal',
        'shippingCompany' => 'setShippingCompany',
        'ipAddress' => 'setIpAddress',
        'guid' => 'setGuid',
        'lastUpdated' => 'setLastUpdated',
        'deliveryTaxRate' => 'setDeliveryTaxRate',
        'deliveryIncludesTax' => 'setDeliveryIncludesTax',
        'customFieldsTotal' => 'setCustomFieldsTotal',
        'customFieldsTaxTotal' => 'setCustomFieldsTaxTotal',
        'customerDetails' => 'setCustomerDetails',
        'customFields' => 'setCustomFields',
        'deliveryTrackingNumber' => 'setDeliveryTrackingNumber',
        'deliveryTrackingCompany' => 'setDeliveryTrackingCompany',
        'deliveryTrackingUrl' => 'setDeliveryTrackingUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'orderNumber' => 'getOrderNumber',
        'orderDate' => 'getOrderDate',
        'orderType' => 'getOrderType',
        'isConfirmed' => 'getIsConfirmed',
        'subTotal' => 'getSubTotal',
        'totalDelivery' => 'getTotalDelivery',
        'totalTax' => 'getTotalTax',
        'totalCost' => 'getTotalCost',
        'status' => 'getStatus',
        'paymentStatus' => 'getPaymentStatus',
        'deliveryMethod' => 'getDeliveryMethod',
        'transactionId' => 'getTransactionId',
        'transactionStatus' => 'getTransactionStatus',
        'useShippingAddress' => 'getUseShippingAddress',
        'shippingAddress' => 'getShippingAddress',
        'internalNotes' => 'getInternalNotes',
        'customerFacingNotes' => 'getCustomerFacingNotes',
        'emailed' => 'getEmailed',
        'discounts' => 'getDiscounts',
        'discountsTotal' => 'getDiscountsTotal',
        'shippingCompany' => 'getShippingCompany',
        'ipAddress' => 'getIpAddress',
        'guid' => 'getGuid',
        'lastUpdated' => 'getLastUpdated',
        'deliveryTaxRate' => 'getDeliveryTaxRate',
        'deliveryIncludesTax' => 'getDeliveryIncludesTax',
        'customFieldsTotal' => 'getCustomFieldsTotal',
        'customFieldsTaxTotal' => 'getCustomFieldsTaxTotal',
        'customerDetails' => 'getCustomerDetails',
        'customFields' => 'getCustomFields',
        'deliveryTrackingNumber' => 'getDeliveryTrackingNumber',
        'deliveryTrackingCompany' => 'getDeliveryTrackingCompany',
        'deliveryTrackingUrl' => 'getDeliveryTrackingUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['orderNumber'] = $data['orderNumber'] ?? null;
        $this->container['orderDate'] = $data['orderDate'] ?? null;
        $this->container['orderType'] = $data['orderType'] ?? null;
        $this->container['isConfirmed'] = $data['isConfirmed'] ?? null;
        $this->container['subTotal'] = $data['subTotal'] ?? null;
        $this->container['totalDelivery'] = $data['totalDelivery'] ?? null;
        $this->container['totalTax'] = $data['totalTax'] ?? null;
        $this->container['totalCost'] = $data['totalCost'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['paymentStatus'] = $data['paymentStatus'] ?? null;
        $this->container['deliveryMethod'] = $data['deliveryMethod'] ?? null;
        $this->container['transactionId'] = $data['transactionId'] ?? null;
        $this->container['transactionStatus'] = $data['transactionStatus'] ?? null;
        $this->container['useShippingAddress'] = $data['useShippingAddress'] ?? null;
        $this->container['shippingAddress'] = $data['shippingAddress'] ?? null;
        $this->container['internalNotes'] = $data['internalNotes'] ?? null;
        $this->container['customerFacingNotes'] = $data['customerFacingNotes'] ?? null;
        $this->container['emailed'] = $data['emailed'] ?? null;
        $this->container['discounts'] = $data['discounts'] ?? null;
        $this->container['discountsTotal'] = $data['discountsTotal'] ?? null;
        $this->container['shippingCompany'] = $data['shippingCompany'] ?? null;
        $this->container['ipAddress'] = $data['ipAddress'] ?? null;
        $this->container['guid'] = $data['guid'] ?? null;
        $this->container['lastUpdated'] = $data['lastUpdated'] ?? null;
        $this->container['deliveryTaxRate'] = $data['deliveryTaxRate'] ?? null;
        $this->container['deliveryIncludesTax'] = $data['deliveryIncludesTax'] ?? null;
        $this->container['customFieldsTotal'] = $data['customFieldsTotal'] ?? null;
        $this->container['customFieldsTaxTotal'] = $data['customFieldsTaxTotal'] ?? null;
        $this->container['customerDetails'] = $data['customerDetails'] ?? null;
        $this->container['customFields'] = $data['customFields'] ?? null;
        $this->container['deliveryTrackingNumber'] = $data['deliveryTrackingNumber'] ?? null;
        $this->container['deliveryTrackingCompany'] = $data['deliveryTrackingCompany'] ?? null;
        $this->container['deliveryTrackingUrl'] = $data['deliveryTrackingUrl'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['orderNumber'] === null) {
            $invalidProperties[] = "'orderNumber' can't be null";
        }
        if ($this->container['orderDate'] === null) {
            $invalidProperties[] = "'orderDate' can't be null";
        }
        if ($this->container['orderType'] === null) {
            $invalidProperties[] = "'orderType' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets orderNumber
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['orderNumber'];
    }

    /**
     * Sets orderNumber
     *
     * @param string $orderNumber orderNumber
     *
     * @return self
     */
    public function setOrderNumber($orderNumber)
    {
        $this->container['orderNumber'] = $orderNumber;

        return $this;
    }

    /**
     * Gets orderDate
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['orderDate'];
    }

    /**
     * Sets orderDate
     *
     * @param \DateTime $orderDate orderDate
     *
     * @return self
     */
    public function setOrderDate($orderDate)
    {
        $this->container['orderDate'] = $orderDate;

        return $this;
    }

    /**
     * Gets orderType
     *
     * @return string
     */
    public function getOrderType()
    {
        return $this->container['orderType'];
    }

    /**
     * Sets orderType
     *
     * @param string $orderType orderType
     *
     * @return self
     */
    public function setOrderType($orderType)
    {
        $this->container['orderType'] = $orderType;

        return $this;
    }

    /**
     * Gets isConfirmed
     *
     * @return bool|null
     */
    public function getIsConfirmed()
    {
        return $this->container['isConfirmed'];
    }

    /**
     * Sets isConfirmed
     *
     * @param bool|null $isConfirmed isConfirmed
     *
     * @return self
     */
    public function setIsConfirmed($isConfirmed)
    {
        $this->container['isConfirmed'] = $isConfirmed;

        return $this;
    }

    /**
     * Gets subTotal
     *
     * @return double|null
     */
    public function getSubTotal()
    {
        return $this->container['subTotal'];
    }

    /**
     * Sets subTotal
     *
     * @param double|null $subTotal subTotal
     *
     * @return self
     */
    public function setSubTotal($subTotal)
    {
        $this->container['subTotal'] = $subTotal;

        return $this;
    }

    /**
     * Gets totalDelivery
     *
     * @return double|null
     */
    public function getTotalDelivery()
    {
        return $this->container['totalDelivery'];
    }

    /**
     * Sets totalDelivery
     *
     * @param double|null $totalDelivery totalDelivery
     *
     * @return self
     */
    public function setTotalDelivery($totalDelivery)
    {
        $this->container['totalDelivery'] = $totalDelivery;

        return $this;
    }

    /**
     * Gets totalTax
     *
     * @return double|null
     */
    public function getTotalTax()
    {
        return $this->container['totalTax'];
    }

    /**
     * Sets totalTax
     *
     * @param double|null $totalTax totalTax
     *
     * @return self
     */
    public function setTotalTax($totalTax)
    {
        $this->container['totalTax'] = $totalTax;

        return $this;
    }

    /**
     * Gets totalCost
     *
     * @return double|null
     */
    public function getTotalCost()
    {
        return $this->container['totalCost'];
    }

    /**
     * Sets totalCost
     *
     * @param double|null $totalCost totalCost
     *
     * @return self
     */
    public function setTotalCost($totalCost)
    {
        $this->container['totalCost'] = $totalCost;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets paymentStatus
     *
     * @return string|null
     */
    public function getPaymentStatus()
    {
        return $this->container['paymentStatus'];
    }

    /**
     * Sets paymentStatus
     *
     * @param string|null $paymentStatus paymentStatus
     *
     * @return self
     */
    public function setPaymentStatus($paymentStatus)
    {
        $this->container['paymentStatus'] = $paymentStatus;

        return $this;
    }

    /**
     * Gets deliveryMethod
     *
     * @return string|null
     */
    public function getDeliveryMethod()
    {
        return $this->container['deliveryMethod'];
    }

    /**
     * Sets deliveryMethod
     *
     * @param string|null $deliveryMethod deliveryMethod
     *
     * @return self
     */
    public function setDeliveryMethod($deliveryMethod)
    {
        $this->container['deliveryMethod'] = $deliveryMethod;

        return $this;
    }

    /**
     * Gets transactionId
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transactionId'];
    }

    /**
     * Sets transactionId
     *
     * @param string|null $transactionId transactionId
     *
     * @return self
     */
    public function setTransactionId($transactionId)
    {
        $this->container['transactionId'] = $transactionId;

        return $this;
    }

    /**
     * Gets transactionStatus
     *
     * @return string|null
     */
    public function getTransactionStatus()
    {
        return $this->container['transactionStatus'];
    }

    /**
     * Sets transactionStatus
     *
     * @param string|null $transactionStatus transactionStatus
     *
     * @return self
     */
    public function setTransactionStatus($transactionStatus)
    {
        $this->container['transactionStatus'] = $transactionStatus;

        return $this;
    }

    /**
     * Gets useShippingAddress
     *
     * @return bool|null
     */
    public function getUseShippingAddress()
    {
        return $this->container['useShippingAddress'];
    }

    /**
     * Sets useShippingAddress
     *
     * @param bool|null $useShippingAddress useShippingAddress
     *
     * @return self
     */
    public function setUseShippingAddress($useShippingAddress)
    {
        $this->container['useShippingAddress'] = $useShippingAddress;

        return $this;
    }

    /**
     * Gets shippingAddress
     *
     * @return \EkmPHP\Models\V1ShippingAddress|null
     */
    public function getShippingAddress()
    {
        return $this->container['shippingAddress'];
    }

    /**
     * Sets shippingAddress
     *
     * @param \EkmPHP\Models\V1ShippingAddress|null $shippingAddress shippingAddress
     *
     * @return self
     */
    public function setShippingAddress($shippingAddress)
    {
        $this->container['shippingAddress'] = $shippingAddress;

        return $this;
    }

    /**
     * Gets internalNotes
     *
     * @return string|null
     */
    public function getInternalNotes()
    {
        return $this->container['internalNotes'];
    }

    /**
     * Sets internalNotes
     *
     * @param string|null $internalNotes internalNotes
     *
     * @return self
     */
    public function setInternalNotes($internalNotes)
    {
        $this->container['internalNotes'] = $internalNotes;

        return $this;
    }

    /**
     * Gets customerFacingNotes
     *
     * @return string|null
     */
    public function getCustomerFacingNotes()
    {
        return $this->container['customerFacingNotes'];
    }

    /**
     * Sets customerFacingNotes
     *
     * @param string|null $customerFacingNotes customerFacingNotes
     *
     * @return self
     */
    public function setCustomerFacingNotes($customerFacingNotes)
    {
        $this->container['customerFacingNotes'] = $customerFacingNotes;

        return $this;
    }

    /**
     * Gets emailed
     *
     * @return bool|null
     */
    public function getEmailed()
    {
        return $this->container['emailed'];
    }

    /**
     * Sets emailed
     *
     * @param bool|null $emailed emailed
     *
     * @return self
     */
    public function setEmailed($emailed)
    {
        $this->container['emailed'] = $emailed;

        return $this;
    }

    /**
     * Gets discounts
     *
     * @return string|null
     */
    public function getDiscounts()
    {
        return $this->container['discounts'];
    }

    /**
     * Sets discounts
     *
     * @param string|null $discounts discounts
     *
     * @return self
     */
    public function setDiscounts($discounts)
    {
        $this->container['discounts'] = $discounts;

        return $this;
    }

    /**
     * Gets discountsTotal
     *
     * @return double|null
     */
    public function getDiscountsTotal()
    {
        return $this->container['discountsTotal'];
    }

    /**
     * Sets discountsTotal
     *
     * @param double|null $discountsTotal discountsTotal
     *
     * @return self
     */
    public function setDiscountsTotal($discountsTotal)
    {
        $this->container['discountsTotal'] = $discountsTotal;

        return $this;
    }

    /**
     * Gets shippingCompany
     *
     * @return string|null
     */
    public function getShippingCompany()
    {
        return $this->container['shippingCompany'];
    }

    /**
     * Sets shippingCompany
     *
     * @param string|null $shippingCompany shippingCompany
     *
     * @return self
     */
    public function setShippingCompany($shippingCompany)
    {
        $this->container['shippingCompany'] = $shippingCompany;

        return $this;
    }

    /**
     * Gets ipAddress
     *
     * @return string|null
     */
    public function getIpAddress()
    {
        return $this->container['ipAddress'];
    }

    /**
     * Sets ipAddress
     *
     * @param string|null $ipAddress ipAddress
     *
     * @return self
     */
    public function setIpAddress($ipAddress)
    {
        $this->container['ipAddress'] = $ipAddress;

        return $this;
    }

    /**
     * Gets guid
     *
     * @return string|null
     */
    public function getGuid()
    {
        return $this->container['guid'];
    }

    /**
     * Sets guid
     *
     * @param string|null $guid guid
     *
     * @return self
     */
    public function setGuid($guid)
    {
        $this->container['guid'] = $guid;

        return $this;
    }

    /**
     * Gets lastUpdated
     *
     * @return \DateTime|null
     */
    public function getLastUpdated()
    {
        return $this->container['lastUpdated'];
    }

    /**
     * Sets lastUpdated
     *
     * @param \DateTime|null $lastUpdated lastUpdated
     *
     * @return self
     */
    public function setLastUpdated($lastUpdated)
    {
        $this->container['lastUpdated'] = $lastUpdated;

        return $this;
    }

    /**
     * Gets deliveryTaxRate
     *
     * @return double|null
     */
    public function getDeliveryTaxRate()
    {
        return $this->container['deliveryTaxRate'];
    }

    /**
     * Sets deliveryTaxRate
     *
     * @param double|null $deliveryTaxRate deliveryTaxRate
     *
     * @return self
     */
    public function setDeliveryTaxRate($deliveryTaxRate)
    {
        $this->container['deliveryTaxRate'] = $deliveryTaxRate;

        return $this;
    }

    /**
     * Gets deliveryIncludesTax
     *
     * @return int|null
     */
    public function getDeliveryIncludesTax()
    {
        return $this->container['deliveryIncludesTax'];
    }

    /**
     * Sets deliveryIncludesTax
     *
     * @param int|null $deliveryIncludesTax deliveryIncludesTax
     *
     * @return self
     */
    public function setDeliveryIncludesTax($deliveryIncludesTax)
    {
        $this->container['deliveryIncludesTax'] = $deliveryIncludesTax;

        return $this;
    }

    /**
     * Gets customFieldsTotal
     *
     * @return double|null
     */
    public function getCustomFieldsTotal()
    {
        return $this->container['customFieldsTotal'];
    }

    /**
     * Sets customFieldsTotal
     *
     * @param double|null $customFieldsTotal customFieldsTotal
     *
     * @return self
     */
    public function setCustomFieldsTotal($customFieldsTotal)
    {
        $this->container['customFieldsTotal'] = $customFieldsTotal;

        return $this;
    }

    /**
     * Gets customFieldsTaxTotal
     *
     * @return double|null
     */
    public function getCustomFieldsTaxTotal()
    {
        return $this->container['customFieldsTaxTotal'];
    }

    /**
     * Sets customFieldsTaxTotal
     *
     * @param double|null $customFieldsTaxTotal customFieldsTaxTotal
     *
     * @return self
     */
    public function setCustomFieldsTaxTotal($customFieldsTaxTotal)
    {
        $this->container['customFieldsTaxTotal'] = $customFieldsTaxTotal;

        return $this;
    }

    /**
     * Gets customerDetails
     *
     * @return \EkmPHP\Models\V1OrderCustomerDetails|null
     */
    public function getCustomerDetails()
    {
        return $this->container['customerDetails'];
    }

    /**
     * Sets customerDetails
     *
     * @param \EkmPHP\Models\V1OrderCustomerDetails|null $customerDetails customerDetails
     *
     * @return self
     */
    public function setCustomerDetails($customerDetails)
    {
        $this->container['customerDetails'] = $customerDetails;

        return $this;
    }

    /**
     * Gets customFields
     *
     * @return string|null
     */
    public function getCustomFields()
    {
        return $this->container['customFields'];
    }

    /**
     * Sets customFields
     *
     * @param string|null $customFields customFields
     *
     * @return self
     */
    public function setCustomFields($customFields)
    {
        $this->container['customFields'] = $customFields;

        return $this;
    }

    /**
     * Gets deliveryTrackingNumber
     *
     * @return string|null
     */
    public function getDeliveryTrackingNumber()
    {
        return $this->container['deliveryTrackingNumber'];
    }

    /**
     * Sets deliveryTrackingNumber
     *
     * @param string|null $deliveryTrackingNumber deliveryTrackingNumber
     *
     * @return self
     */
    public function setDeliveryTrackingNumber($deliveryTrackingNumber)
    {
        $this->container['deliveryTrackingNumber'] = $deliveryTrackingNumber;

        return $this;
    }

    /**
     * Gets deliveryTrackingCompany
     *
     * @return string|null
     */
    public function getDeliveryTrackingCompany()
    {
        return $this->container['deliveryTrackingCompany'];
    }

    /**
     * Sets deliveryTrackingCompany
     *
     * @param string|null $deliveryTrackingCompany deliveryTrackingCompany
     *
     * @return self
     */
    public function setDeliveryTrackingCompany($deliveryTrackingCompany)
    {
        $this->container['deliveryTrackingCompany'] = $deliveryTrackingCompany;

        return $this;
    }

    /**
     * Gets deliveryTrackingUrl
     *
     * @return string|null
     */
    public function getDeliveryTrackingUrl()
    {
        return $this->container['deliveryTrackingUrl'];
    }

    /**
     * Sets deliveryTrackingUrl
     *
     * @param string|null $deliveryTrackingUrl deliveryTrackingUrl
     *
     * @return self
     */
    public function setDeliveryTrackingUrl($deliveryTrackingUrl)
    {
        $this->container['deliveryTrackingUrl'] = $deliveryTrackingUrl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


